{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-tag-query-tsx",
    "path": "/tags/unity-development",
    "result": {"data":{"allPost":{"nodes":[{"slug":"/blog/toon-shader","title":"Toon Shaders","date":"03.02.2023","excerpt":"Toon shading  (often called  cel shading ) is a rendering style designed to make 3D surfaces emulate 2D, flat surfaces. This is a kind of…","timeToRead":2,"description":"thing learnt when implementing toon Shaders","tags":[{"name":"Unity development","slug":"unity-development"},{"name":"Shader Effects","slug":"shader-effects"},{"name":"Graphics","slug":"graphics"}]},{"slug":"/blog/gpu-skinning","title":"GPU Skinning+GPU instancing for rendering 1000+ characters","date":"10.10.2022","excerpt":"GPU Skinning is a GPU calculation technique to free the CPU from calculating animation using Skinmesh renderer. When developing scenes with…","timeToRead":4,"description":null,"tags":[{"name":"Unity development","slug":"unity-development"}]},{"slug":"/blog/pico-oculus-dev","title":"Pico and Oculus Universal development","date":"22.09.2022","excerpt":"The unity version of this article is Unity2021.3.8f1c1 1. Device Selection Recently, I have been assigned to develop a VR exhibition…","timeToRead":2,"description":null,"tags":[{"name":"AR/VR","slug":"ar-vr"},{"name":"Unity development","slug":"unity-development"}]},{"slug":"/blog/zenject-2","title":"DI in Zenject 2(Non-mono, SignalBus and Factory)","date":"28.07.2022","excerpt":"1. Non-mono In some cases, it is preferable to avoid the extra weight of MonoBehaviours in favor of just normal C# classes. Zenject allows…","timeToRead":3,"description":null,"tags":[{"name":"Unity development","slug":"unity-development"},{"name":"Design Pattern","slug":"design-pattern"}]},{"slug":"/blog/zenject-1","title":"DI in Zenject 1 (Basic concepts and Hello world)","date":"03.07.2022","excerpt":"1. Zenject Hello world Zenject  is a lightweight highly performant DI(dependency injection) framework built specifically to target Unity 3D…","timeToRead":3,"description":null,"tags":[{"name":"Unity development","slug":"unity-development"},{"name":"Design Pattern","slug":"design-pattern"}]},{"slug":"/blog/unity-packages","title":"Everything about Unity Packages","date":"12.06.2022","excerpt":"1. How Unity works with packages When Unity opens a Project, the Unity Package Manager reads the Project manifest to figure out what…","timeToRead":3,"description":null,"tags":[{"name":"Unity development","slug":"unity-development"},{"name":"Code management and collaboration","slug":"code-management-and-collaboration"}]},{"slug":"/blog/preprocessor-directives","title":"Preprocessor directives(C# and Unity)","date":"12.04.2022","excerpt":"1.C# preprocessor directives Defining symbols You use the following two preprocessor directives to define or undefine symbols for…","timeToRead":1,"description":"Preprocessor directives(C# and Unity)","tags":[{"name":"Unity development","slug":"unity-development"}]}]}},"pageContext":{"slug":"unity-development","name":"Unity development","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}