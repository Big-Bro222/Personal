{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/blog/unity-mobile-lifecycle",
    "result": {"data":{"post":{"slug":"/blog/unity-mobile-lifecycle","title":"Unity Life Cycle related to Mobile platform","date":"12.12.2022","tags":[{"name":"Android","slug":"android"},{"name":"Unity development","slug":"unity-development"}],"description":"Unity Life Cycle related to Mobile platform","canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Unity Life Cycle related to Mobile platform\",\n  \"description\": \"Unity Life Cycle related to Mobile platform\",\n  \"date\": \"2022-12-12T00:00:00.000Z\",\n  \"slug\": \"/blog/unity-mobile-lifecycle\",\n  \"tags\": [\"Android\", \"Unity development\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Note that all these note\\uFF0C is also avaliable on Android-based VR devices. Be used for event tracking service\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"//Application goes to background pause = true \\n//Application goes to front pause = false\\nvoid OnApplicationPause(bool pause){\\nif(pause)\\n{\\n    //Switch to background\\n}\\nelse\\n{\\n    //Switch to front\\n}\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"\\n//Application goes to background focus = false \\n//Application goes to front focus = true\\nvoid OnApplicationFocus(bool focus){\\n   if(focus)\\n   {\\n     //when the application is in focus\\n   }\\n   else\\n   {\\n     //when the applicaiton is running on the background\\n   }\\n}\\n\")), mdx(\"h1\", null, \"Different Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"//Start the App:\\nOnApplicationFocus, isFocus=True\\n\\n//Quit the App:\\nOnApplicationQuit\\n\\n//Get out by pressing home\\uFF1A\\nOnApplicationPause, isPause=True\\nOnApplicationFocus, isFocus=False\\n\\n//Go in with home\\nOnApplicationPause, isPause=False\\nOnApplicationFocus, _isFocus=True\\n\\n//Kill the process\\uFF1A\\n\\n////Double press Home\\uFF0Cand Kill\\uFF1A\\nOnApplicationQuit  (IOS called\\uFF0Candroid not called)\\n\\n////Get out of home first and kill from background\\nOnApplicationQuit  (IOS and Android not called)\\n\\n////OnApplicationQuit will always be called when application.quit is called\\n\")), mdx(\"h1\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://blog.csdn.net/shuangkui5355/article/details/80358079\"\n  }, \"https://blog.csdn.net/shuangkui5355/article/details/80358079\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://dev.to/kento/unity-a-solution-if-you-cant-receive-the-event-that-finishes-an-app-on-mobile-4n2d\"\n  }, \"https://dev.to/kento/unity-a-solution-if-you-cant-receive-the-event-that-finishes-an-app-on-mobile-4n2d\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Note that all these note， is also avaliable on Android-based VR devices. Be used for event tracking service Different Usage Reference https…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/blog/unity-mobile-lifecycle","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}