{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/blog/git-lfs",
    "result": {"data":{"post":{"slug":"/blog/git-lfs","title":"Git LFS","date":"25.01.2022","tags":[{"name":"Code management and collaboration","slug":"code-management-and-collaboration"}],"description":"Git LFS","canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Git LFS\",\n  \"description\": \"Git LFS\",\n  \"date\": \"2022-01-25T00:00:00.000Z\",\n  \"slug\": \"/blog/git-lfs\",\n  \"tags\": [\"Code management and collaboration\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"undefined\", null, mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/git-lfs/git_lfs.gif\",\n    \"width\": \"100%\",\n    \"alt\": \"git_lfs.gif\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  })), \"\\nGit LFS does this by replacing large files in your repository with tiny\\xA0*pointer*\\xA0files. During normal usage, you'll never see these pointer files as they are handled automatically by Git LFS:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"When you add a file to your repository, Git LFS replaces its contents with a pointer, and stores the file contents in a local Git LFS cache.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"When you push new commits to the server, any Git LFS files referenced by the newly pushed commits are transferred from your local Git LFS cache to the remote Git LFS store tied to your Git repository.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"When you checkout a commit that contains Git LFS pointers, they are replaced with files from your local Git LFS cache, or downloaded from the remote Git LFS store.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Git LFS (Large File Storage) is a Git extension developed by Atlassian, GitHub, and a few other open-source contributors, that reduces the impact of large files in your repository by downloading the relevant versions of them\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"lazily\"), \". Specifically, large files are downloaded during the checkout process rather than during cloning or fetching.\")), mdx(\"h1\", null, \"Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"git lfs install\\n\\n$ git lfs install\\nUpdated pre-push hook.\\nGit LFS initialized.\\n\\n$ git lfs track \\\"*.ogg\\\"\\nTracking *.ogg\\n\\n$ git lfs track\\nListing tracked paths\\n*.stl (.gitattributes)\\n*.png (Assets/Sprites/.gitattributes)\\n*.ogg (Assets/Audio/.gitattributes)\\n\\n$ git lfs ls-files\\nCheck all files currently tracked by lfs\\n9a3c7dae41 * 1.png\\nd61cf5835a * 2.png\\n158213f90f * 3.svg\\n\\n$ git lfs untrack \\\"1.png\\\"\\nUncheck a specific file\\n\\n$ git add .gitattributes\\n$ git commit -m \\\"add .gitattributes\\\"\\n\")), mdx(\"p\", null, \"You can also add .gitatrributes template to the local repository instead of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git lfs track\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"## Unity gitatrributes template ##\\n\\n*.cs diff=csharp text\\n*.cginc text\\n*.shader text\\n\\n*.mat merge=unityyamlmerge eol=lf\\n*.anim merge=unityyamlmerge eol=lf\\n*.unity merge=unityyamlmerge eol=lf\\n*.prefab merge=unityyamlmerge eol=lf\\n*.physicsMaterial2D merge=unityyamlmerge eol=lf\\n*.physicsMaterial merge=unityyamlmerge eol=lf\\n*.asset merge=unityyamlmerge eol=lf\\n*.meta merge=unityyamlmerge eol=lf\\n*.controller merge=unityyamlmerge eol=lf\\n\\n## git-lfs ##\\n\\n#Image\\n*.jpg filter=lfs diff=lfs merge=lfs -text\\n*.jpeg filter=lfs diff=lfs merge=lfs -text\\n*.png filter=lfs diff=lfs merge=lfs -text\\n*.gif filter=lfs diff=lfs merge=lfs -text\\n*.psd filter=lfs diff=lfs merge=lfs -text\\n*.ai filter=lfs diff=lfs merge=lfs -text\\n*.tif filter=lfs diff=lfs merge=lfs -text\\n\\n#Audio\\n*.mp3 filter=lfs diff=lfs merge=lfs -text\\n*.wav filter=lfs diff=lfs merge=lfs -text\\n*.ogg filter=lfs diff=lfs merge=lfs -text\\n\\n#Video\\n*.mp4 filter=lfs diff=lfs merge=lfs -text\\n*.mov filter=lfs diff=lfs merge=lfs -text\\n\\n#3D Object\\n*.FBX filter=lfs diff=lfs merge=lfs -text\\n*.fbx filter=lfs diff=lfs merge=lfs -text\\n*.blend filter=lfs diff=lfs merge=lfs -text\\n*.obj filter=lfs diff=lfs merge=lfs -text\\n*.asset filter=lfs diff=lfs merge=lfs -text\\n\\n#ETC\\n*.a filter=lfs diff=lfs merge=lfs -text\\n*.exr filter=lfs diff=lfs merge=lfs -text\\n*.tga filter=lfs diff=lfs merge=lfs -text\\n*.pdf filter=lfs diff=lfs merge=lfs -text\\n*.zip filter=lfs diff=lfs merge=lfs -text\\n*.dll filter=lfs diff=lfs merge=lfs -text\\n*.unitypackage filter=lfs diff=lfs merge=lfs -text\\n*.aif filter=lfs diff=lfs merge=lfs -text\\n*.ttf filter=lfs diff=lfs merge=lfs -text\\n*.rns filter=lfs diff=lfs merge=lfs -text\\n*.reason filter=lfs diff=lfs merge=lfs -text\\n*.lxo filter=lfs diff=lfs merge=lfs -text\\n\")), mdx(\"h1\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gitee.com/help/articles/4235#article-header5\"\n  }, \"https://gitee.com/help/articles/4235#article-header5\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.atlassian.com/git/tutorials/git-lfs\"\n  }, \"https://www.atlassian.com/git/tutorials/git-lfs\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"When you add a file to your repository, Git LFS replaces its contents with a pointer, and stores the file contents in a local Git LFS cacheâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/blog/git-lfs","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}