{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/blog/CSharpGeneric",
    "result": {"data":{"post":{"slug":"/blog/CSharpGeneric","title":"C#泛型Generic","date":"19.07.2021","tags":[{"name":"C# basics","slug":"c-basics"}],"description":"C#泛型Generic","canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"C#泛型Generic\",\n  \"description\": \"C#泛型Generic\",\n  \"date\": \"2021-07-19T00:00:00.000Z\",\n  \"slug\": \"/blog/CSharpGeneric\",\n  \"tags\": [\"C# basics\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Bird = makeShortcode(\"Bird\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"C#\\u6CDB\\u578BGeneric\"), mdx(\"h1\", null, \"1.\\u6CDB\\u578B\\u7684\\u56DB\\u79CD\\u7C7B\\u578B\"), mdx(\"p\", null, \"\\u6CDB\\u578B\\u6709\\u56DB\\u79CD\\uFF1A\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6CDB\\u578B\\u65B9\\u6CD5 method\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6CDB\\u578B\\u7C7B class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6CDB\\u578B\\u59D4\\u6258 delegate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6CDB\\u578B\\u63A5\\u53E3 interface\")), mdx(\"p\", null, \"\\u4F18\\u70B9Pros\\uFF1A\\u4EE3\\u7801\\u7684\\u53EF\\u91CD\\u7528\\u6027\\u589E\\u52A0\\uFF0C\\u7C7B\\u578B\\u5B89\\u5168\\u6027\\u63D0\\u9AD8\\u3002\\u6027\\u80FD\\u66F4\\u597D,\\u4E0D\\u9700\\u8981\\u88C5\\u7BB1\\u548C\\u62C6\\u7BB1\\u3002\\u6CDB\\u578B\\u59D4\\u6258\\u53EF\\u4EE5\\u5728\\u65E0\\u9700\\u521B\\u5EFA\\u591A\\u4E2A\\u59D4\\u6258\\u7C7B\\u7684\\u60C5\\u51B5\\u4E0B\\u8FDB\\u884C\\u7C7B\\u578B\\u5B89\\u5168\\u7684\\u56DE\\u8C03\\u3002\\u6CDB\\u578B\\u7B80\\u5316\\u52A8\\u6001\\u751F\\u6210\\u7684\\u4EE3\\u7801\\u3002\"), mdx(\"p\", null, \"\\u6CDB\\u578B\\u5728\\u58F0\\u660E\\u7684\\u65F6\\u5019\\u6CA1\\u6709\\u6307\\u660E\\u7C7B\\u578B\\uFF0C\\u800C\\u662F\\u5728\\u8C03\\u7528\\u7684\\u65F6\\u5019\\u6307\\u5B9A\\u7C7B\\u578B\\uFF0C\\u8FD9\\u79CD\\u8BBE\\u8BA1\\u601D\\u60F3\\u662F\\u5EF6\\u8FDF\\u601D\\u60F3\"), mdx(\"h1\", null, \"2.\\u6CDB\\u578B\\u7F13\\u5B58\"), mdx(\"p\", null, \"\\u6CDB\\u578B\\u7C7B\\u7684\\u9759\\u6001\\u6210\\u5458\\u53EA\\u80FD\\u5728\\u7C7B\\u7684\\u4E00\\u4E2A\\u5B9E\\u4F8B\\u4E2D\\u5171\\u4EAB\\u3002\\u8FD0\\u884C\\u65F6\\u6CDB\\u578B\\u7C7B\\u7684\\u5B9E\\u4F8B\\u5DF2\\u7ECF\\u6307\\u5B9A\\u4E86\\u5177\\u4F53\\u7C7B\\u578B\\uFF0C\\u6BCF\\u4E00\\u4E2A\\u4E0D\\u540C\\u7684\\u6CDB\\u578B\\u7C7B\\u5B9E\\u4F8B\\u5171\\u4EAB\\u9759\\u6001\\u6210\\u5458\\uFF0C\\u5229\\u7528\\u8FD9\\u4E2A\\u7279\\u70B9\\u5C31\\u53EF\\u4EE5\\u505A\\u7F13\\u5B58\\u3002\\u6BCF\\u4E00\\u4E2A\\u4E0D\\u540C\\u7684T\\u7F13\\u5B58\\u4E00\\u4E2A\\u7248\\u672C\\u6570\\u636E\\u3002\\u5982\\u4F8B\\u5B50\\u6240\\u793A\\uFF0C\\u5F53\\u7B2C\\u4E00\\u6B21\\u6307\\u5B9A\\u4E0D\\u540C\\u7684T\\u65F6\\uFF0C\\u4F1A\\u91CD\\u65B0\\u6784\\u9020\\uFF0C\\u518D\\u6B21\\u6709\\u76F8\\u540C\\u7684\\u7C7B\\u578B\\u65F6\\uFF0C\\u5C31\\u4E0D\\u4F1A\\u8FDB\\u5165\\u9759\\u6001\\u6784\\u9020\\u51FD\\u6570\\u4E86\\u3002\\u76F8\\u5F53\\u4E8E\\u4E3A\\u7F13\\u5B58\\u4E86\\u591A\\u4E2A\\u7248\\u672C\\u7684\\u9759\\u6001\\u6210\\u5458\\u3002\\u6BD4\\u5982\\u5728\\u5404\\u4E2A\\u6570\\u636E\\u5E93\\u5B9E\\u4F53\\u7C7B\\u9700\\u8981\\u6709\\u4E00\\u4E9B\\u589E\\u5220\\u6539\\u67E5\\u7684SQL\\u65F6\\uFF0C\\u5C31\\u53EF\\u4EE5\\u5229\\u7528\\u7528\\u6CDB\\u578B\\u7279\\u6027\\uFF0C\\u6BCF\\u4E00\\u4E2A\\u6570\\u636E\\u5E93\\u5B9E\\u4F53\\u7C7B\\u90FD\\u4F1A\\u7F13\\u5B58\\u4E00\\u4EFD\\u81EA\\u5DF1\\u7684\\u589E\\u5220\\u6539\\u67E5SQL\\u3002\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"public class GenericCache<T>\\n{\\n    static GenericCache()\\n    {\\n        Console.WriteLine(\\\"\\u8FDB\\u5165\\u9759\\u6001\\u6784\\u9020\\u51FD\\u6570\\\");\\n        _TypeTime = $\\\"{typeof(T).FullName}_{DateTime.Now.ToString()}\\\";\\n    }\\n\\n    private static string _TypeTime = \\\"\\\";\\n\\n    public static string GetCache()\\n    {\\n        return _TypeTime;\\n    }\\n}\\n\\nConsole.WriteLine(\\\"************************\\\");\\nConsole.WriteLine(GenericCache<int>.GetCache());\\nThread.Sleep(1000);\\nConsole.WriteLine(GenericCache<string>.GetCache());\\nThread.Sleep(1000);\\nConsole.WriteLine(\\\"\\u8BA4\\u771F\\u6BD4\\u8F83\\u6253\\u5370\\u51FA\\u7684\\u9759\\u6001\\u6210\\u5458\\u503C\\\");\\nConsole.WriteLine(GenericCache<int>.GetCache());\\nThread.Sleep(1000);\\nConsole.WriteLine(GenericCache<string>.GetCache());\\nConsole.WriteLine(\\\"************************\\\");\\n\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"C#%E6%B3%9B%E5%9E%8BGeneric%2069d8ed0f895748579cb4f88b39710c7f/a38edd65eda84685b56c3e6287c1b910.png\",\n    \"alt\": \"a38edd65eda84685b56c3e6287c1b910.png\"\n  })), mdx(\"h1\", null, \"3.\\u7EA6\\u675FConstrain\"), mdx(\"p\", null, \"public Method<T\", \">\", \"(T parameter) where T: constrain, Iconstrain\\uFF08\\u7C7B\\uFF0C\\u63A5\\u53E3\\uFF09\"), mdx(\"p\", null, \"public Method<T\", \">\", \"(T parameter) where T: class\\uFF08or struct\\uFF09\"), mdx(\"p\", null, \"default\\uFF08T\\uFF09;\\u503C\\u7C7B\\u578B\\u9ED8\\u8BA4\"), mdx(\"p\", null, \"null\\uFF1B\\u5F15\\u7528\\u7C7B\\u578B\\u9ED8\\u8BA4\"), mdx(\"h1\", null, \"4.\\u6CDB\\u578B\\u7C7B\\u7684\\u7EE7\\u627F\"), mdx(\"p\", null, \"class ChildClass<T\", \">\", \": GenericParentClass<T\", \">\"), mdx(\"p\", null, \"class ChildClass : GenericParentClass<int\", \">\"), mdx(\"h1\", null, \"5.\\u534F\\u53D8\\u548C\\u9006\\u53D8\"), mdx(\"p\", null, \"\\u534F\\u53D8\\uFF08out\\uFF09\\uFF0C\\u9006\\u53D8\\uFF08in\\uFF09,\\u53EA\\u80FD\\u5728\\u63A5\\u53E3\\u548C\\u59D4\\u6258\\u4E0A\\u4F7F\\u7528\"), mdx(\"p\", null, \"\\u8981\\u89E3\\u51B3\\u7684\\u95EE\\u9898\\u5982\\u4E0B\\uFF1Asparrow\\u548CBird\\u4E3A\\u7236\\u5B50\\u5173\\u7CFB\\uFF0C\\u4F46\\u662FList\", mdx(\"sparrow\", null), \"\\u548CList\", mdx(Bird, {\n    mdxType: \"Bird\"\n  }), \"\\u4E0D\\u662F\\u7236\\u5B50\\u5173\\u7CFB\"), mdx(\"p\", null, \"\\u5BF9\\u5E94\\u8FD9\\u6837\\u7684\\u95EE\\u9898\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"class sparrow: Bird\\n\\n##right writing\\nBird instance=new sparrow();\\nsparrow instance=new sparrow();\\nBird instance=new Bird();\\n\\n##wrong writing\\nlist<Bird> instance=new List<sparrow>();\\n\")), mdx(\"p\", null, \"\\u534F\\u53D8\\uFF1A\\u53EF\\u4EE5\\u5DE6\\u9762\\u662F\\u7236\\u7C7B\\u578B\\uFF0C\\u53F3\\u9762\\u662F\\u5B50\\u7C7B\\u578B\\uFF0C\\u8981\\u6C42T\\u53EA\\u80FD\\u662F\\u8FD4\\u56DE\\u503C\\uFF0C\\u4E0D\\u80FD\\u505A\\u53C2\\u6570\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"\\nIEnumerable<Bird> instance=new List<sparrow>();\\n\\npublic interface ICustomerListOut<out T>\\npublic class CustomerListOut<T>:ICustomerListOut<T>\\nICustomerListOut<Bird> customer=new CustomerListOut<Sparrow>();\\n\")), mdx(\"p\", null, \"\\u9006\\u53D8\\uFF1A\\u53EF\\u4EE5\\u5DE6\\u9762\\u662F\\u5B50\\u7C7B\\u578B\\uFF0C\\u53F3\\u9762\\u662F\\u7236\\u7C7B\\u578B\\uFF0C\\u8981\\u6C42T\\u8FD9\\u80FD\\u4F5C\\u4E3A\\u53C2\\u6570\\uFF0C\\u4E0D\\u80FD\\u4F5C\\u4E3A\\u8FD4\\u56DE\\u503C\"), mdx(\"p\", null, \"\\u534F\\u53D8\\u9006\\u53D8\\u4F7F\\u58F0\\u660E\\u63A5\\u53E3\\u548C\\u59D4\\u6258\\u7684\\u65F6\\u5019\\u53EF\\u4EE5\\u66F4\\u7075\\u6D3B\\uFF0C\\u907F\\u514Dlist\", mdx(Bird, {\n    mdxType: \"Bird\"\n  }), \" instance=new List\", mdx(\"sparrow\", null), \"(); \\u8FD9\\u79CD\\u8BED\\u4E49\\u901A\\u4F46\\u662F\\u4E0D\\u80FD\\u7F16\\u8BD1\\u7684\\u884C\\u4E3A\\u51FA\\u73B0\"), mdx(\"h1\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/zh-cn/dotnet/standard/generics\"\n  }, \"https://docs.microsoft.com/zh-cn/dotnet/standard/generics\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"C#泛型Generic 1.泛型的四种类型 泛型有四种： 泛型方法 method 泛型类 class 泛型委托 delegate 泛型接口 interface 优点Pros…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/blog/CSharpGeneric","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}