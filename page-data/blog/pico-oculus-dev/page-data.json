{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/blog/pico-oculus-dev",
    "result": {"data":{"post":{"slug":"/blog/pico-oculus-dev","title":"Pico and Oculus Universal development","date":"22.09.2022","tags":[{"name":"AR/VR","slug":"ar-vr"},{"name":"Unity development","slug":"unity-development"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pico and Oculus Universal development\",\n  \"date\": \"2022-09-22T00:00:00.000Z\",\n  \"slug\": \"/blog/pico-oculus-dev\",\n  \"tags\": [\"AR/VR\", \"Unity development\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The unity version of this article is Unity2021.3.8f1c1\"), mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/quest-pico-universal-development/Cover.png\",\n    \"width\": \"100%\",\n    \"alt\": \"Cover\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  })), mdx(\"h1\", null, \"1. Device Selection\"), mdx(\"p\", null, \"Recently, I have been assigned to develop a VR exhibition application for the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.zgcforum.com.cn/en/index.html\"\n  }, \"ZGC Forum\"), \". The task includes developing a VR application and projecting it to the TV. So I did research on this topic and the result is as follows:\"), mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/quest-pico-universal-development/DeviceSelection.png\",\n    \"width\": \"100%\",\n    \"alt\": \"Device Selection\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  }), \"\\n    \", mdx(\"div\", {\n    parentName: \"left\",\n    \"style\": {\n      \"color\": \"#999\",\n      \"borderBottom\": \"1px solid #d9d9d9\",\n      \"display\": \"inline-block\"\n    }\n  }, \"\\n     Figure 1 Device Selection\\n  \\t\")), mdx(\"p\", null, \"Pico Neo3 only support VR solution for steam VR when connecting with PC and supports development with Unity XR interaction toolkit running on the device. While Oculus Quest with Unity XR interaction toolkit(XRI toolkit) supports running on the device and running as Oculus Link on PC.\"), mdx(\"p\", null, \"Considering the requirement of building an application that is suitable for both Oculus quest2 and Pico Neo3, we finally decided to use the Unity XRI toolkit.\"), mdx(\"p\", null, \"It\\u2019s making use of the new Input system for universal control(which in my opinion is beneficial eventually but painful to learn because of the concept of the Unity Input System).\"), mdx(\"p\", null, \"It provides the following basic functionalities :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Locomotion(Teleportation, Continues Move, Turn)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"UI system for 3D\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interaction with Objects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Character controllers\")), mdx(\"p\", null, \"I guess the most disadvantage for me right now is that the XR toolkit doesn\\u2019t support Oculus-specific functions. For example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hand tracking\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pass through\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Shader based avatars (which is styleished and optimized for VR)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Animations while pressing buttons\")), mdx(\"p\", null, \"But one thing that XRI toolkit does better is that Oculus integration don\\u2019t have \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=d4bTpkvBwrs\"\n  }, \"Device simulator\"), \" for hands interaction.\"), mdx(\"h1\", null, \"2.Setup\"), mdx(\"h2\", null, \"2.1 Packages installation\"), mdx(\"p\", null, \"Unity XRI toolkit is fairly new at this point (2022), it takes some time to get a new project running properly.\"), mdx(\"p\", null, \"To get started for the universal development of Pico and Oculus, packages should be installed:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"new input system,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"openXR\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"oculus XR plugin\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"XR interaction toolkit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"XR plugin management\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pico XR integration(download from Pico official website)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Oculus integration(from Asset store)\")), mdx(\"p\", null, \"Note: You have to import Pico integration before Oculus integration to Avoid a .dll conflict.\"), mdx(\"h2\", null, \"2.2 Configue User settings\"), mdx(\"p\", null, \"If you Add a XROrign (which is in the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"GameObject > XR > XROrigin\"), \" ) at this moment, the XRController script wouldn\\u2019t know how to map the device buttons with the in-Game logics. (So don\\u2019t add it right now)\"), mdx(\"p\", null, \"Luckily, Unity provides a Starter Asset Sample for the XR interaction toolkit. Import the Sample Called Starter Assets, and attach an Input Action Manger component to any objects and assign XRI Default Input Actions.\"), mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/quest-pico-universal-development/StarterAssets.png\",\n    \"width\": \"100%\",\n    \"alt\": \"Input system XR Sample\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  }), \"\\n    \", mdx(\"div\", {\n    parentName: \"left\",\n    \"style\": {\n      \"color\": \"#999\",\n      \"borderBottom\": \"1px solid #d9d9d9\",\n      \"display\": \"inline-block\"\n    }\n  }, \"\\n     Figure 2 Input system XR Sample\\n  \\t\")), mdx(\"p\", null, \"Then go to the project Settings to configue some preset as the following picture.\"), mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/quest-pico-universal-development/PresetManager.png\",\n    \"width\": \"100%\",\n    \"alt\": \"Traditional Way of Dependency Management\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  }), \"\\n    \", mdx(\"div\", {\n    parentName: \"left\",\n    \"style\": {\n      \"color\": \"#999\",\n      \"borderBottom\": \"1px solid #d9d9d9\",\n      \"display\": \"inline-block\"\n    }\n  }, \"\\n     Figure 3 Preset Manager\\n  \\t\")), mdx(\"p\", null, \"Now, everything should be working. Add the XR origin on the scene and assign prefabs to the Left and Right Hand Controllers. To get start with Unity XR development, you can also see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Unity-Technologies/XR-Interaction-Toolkit-Examples\"\n  }, \"XR toolkit example\"), \" to get more inspiration. At this point, you can already develop and debug through Unity Editor using Oculus Link and deploy a functional application on BOTH Pico Neo3 and Oculus Quest2 Devices\"), mdx(\"h1\", null, \"3. Adding Oculus-Specific functionalities (TBD)\"), mdx(\"p\", null, \"Then an idea comes to my mind: What if I only using XR interaction toolkit to manage interactions and locomotion, but use Oculus integration to track device position ? Then I can add hand tracking functions and additional function like passthrough to the project.\"), mdx(\"p\", null, \"So I add an OVRCameraRig to the scene. And copied the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LeftHandController\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RightHandController\"), \" GameObject as a Child of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LeftHandAnchor\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RightHandAnchor\"), \" GameObject. Then disable the Input Tracking functions for XR Controller. After that , add XR Origin component to the OVRCameraRig to enable teleportation and Continues movement.\"), mdx(\"p\", null, \"The last part would be check if the Controllers are detectable and change the visiblity according to this. Detect if it\\u2019s Oculus device during \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Awake()\"), \", and switch between XROrigin and OVRCameraRig accordingly. The main difference is that both devices can use the same environment and interactables logic.\"), mdx(\"undefined\", null, mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/quest-pico-universal-development/HandConfigue.png\",\n    \"width\": \"50%\",\n    \"alt\": \"HandConfigue\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  })), mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/quest-pico-universal-development/XRController.png\",\n    \"width\": \"50%\",\n    \"alt\": \"Traditional Way of Dependency Management\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  })), mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/quest-pico-universal-development/XROrigin.png\",\n    \"width\": \"60%\",\n    \"alt\": \"Traditional Way of Dependency Management\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  }))), mdx(\"h1\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Unity-Technologies/XR-Interaction-Toolkit-Examples\"\n  }, \"https://github.com/Unity-Technologies/XR-Interaction-Toolkit-Examples\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://portal.productboard.com/brs5gbymuktquzeomnargn2u/tabs/8-xr-interaction-toolkit\"\n  }, \"https://portal.productboard.com/brs5gbymuktquzeomnargn2u/tabs/8-xr-interaction-toolkit\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.1/manual/general-setup.html\"\n  }, \"https://docs.unity3d.com/Packages/com.unity.xr.interaction.toolkit@2.1/manual/general-setup.html\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"The unity version of this article is Unity2021.3.8f1c1 1. Device Selection Recently, I have been assigned to develop a VR exhibition…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/blog/pico-oculus-dev","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}