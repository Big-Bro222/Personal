{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/blog/collection-csharp-basic/2",
    "result": {"data":{"post":{"slug":"/blog/collection-csharp-basic/2","title":"Collections in C# (The basics 2)","date":"15.05.2022","tags":[{"name":"C# basics","slug":"c-basics"}],"description":"A discussion for C# System.Collections and System.Collection.generic","canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Collections in C# (The basics 2)\",\n  \"date\": \"2022-05-15T00:00:00.000Z\",\n  \"description\": \"A discussion for C# System.Collections and System.Collection.generic\",\n  \"slug\": \"/blog/collection-csharp-basic/2\",\n  \"tags\": [\"C# basics\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"3. System.Collection\"), mdx(\"p\", null, \"The System.Collection.Generic namespace came out during .Net 2.0, so the System.Collection is a bit obselete (cause it\\u2019s not type-safe and not efficient with box and unbox)\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The classes in the\\xA0System.Collections\\xA0namespace do not store elements as specifically typed objects, but as objects of type\\xA0Object. Whenever possible, you should use the generic collections in the\\xA0System.Collections.Generic\\xA0namespace or the \\xA0System.Collections.Concurrent\\xA0 namespace instead of the legacy types in the\\xA0System.Collections\\xA0namespace.\")), mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/Collections-in-CSharp(The-basics-2)/generic_non_mapping.png\",\n    \"width\": \"100%\",\n    \"alt\": \"MapVisualization.gif\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  }), \"\\n    \", mdx(\"div\", {\n    parentName: \"left\",\n    \"style\": {\n      \"color\": \"#999\",\n      \"borderBottom\": \"1px solid #d9d9d9\",\n      \"display\": \"inline-block\"\n    }\n  }, \"\\n    Figure 1 A mapping between generic and nongeneric collections\\n  \\t\")), mdx(\"p\", null, \"Many of the generic collection types are direct analogs of nongeneric types. Dictionary<TKey,TValue\", \">\", \" is a generic version of\\xA0Hashtable; it uses the generic structure\\xA0KeyValuePair<TKey,TValue\", \">\", \" for enumeration instead of\\xA0DictionaryEntry.\\xA0List<T\", \">\", \"\\n\\xA0is a generic version of\\xA0ArrayList. There are generic\\xA0Queue<T\", \">\", \"\\xA0and\\xA0Stack<T\", \">\", \"classes that correspond to the nongeneric versions. There are generic and nongeneric versions of\\xA0SortedList<TKey,TValue\", \">\", \"\\n. Both versions are hybrids of a dictionary and a list. The\\xA0SortedDictionary<TKey,TValue\", \">\", \"\\n\\xA0a generic class is a pure dictionary and has no nongeneric counterpart. The\\xA0LinkedList<T\", \">\", \"\\n\\xA0a generic class is a true linked list and has no nongeneric counterpart.\"), mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/Collections-in-CSharp(The-basics-2)/collections.png\",\n    \"width\": \"100%\",\n    \"alt\": \"MapVisualization.gif\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  }), \"\\n    \", mdx(\"div\", {\n    parentName: \"left\",\n    \"style\": {\n      \"color\": \"#999\",\n      \"borderBottom\": \"1px solid #d9d9d9\",\n      \"display\": \"inline-block\"\n    }\n  }, \"\\n    Figure 2 System.Collections\\n  \\t\")), mdx(\"h1\", null, \"4. How to choose a collection ?\"), mdx(\"p\", null, \"Consider the following questions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A sequential list where the element is discarded after its value is retrieved?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If yes, \\xA0Queue,\\xA0Queue<T\", \">\", \"\\xA0,\\xA0Stack\\xA0,\\xA0Stack<T\", \">\", \"\\xA0,\\xA0ConcurrentQueue<T\", \">\", \"\\xA0,\\xA0ConcurrentStack<T\", \">\", \". \\xA0ImmutableQueue<T\", \">\", \"\\xA0and\\xA0ImmutableStack<T\", \">\", \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If not, consider using the other collections.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Access the elements in a certain order?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Queue,\\xA0Queue<T\", \">\", \", ConcurrentQueue<T\", \">\", \",\\xA0ImmutableQueue<T\", \">\", \" offer FIFO access.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stack\\xA0,\\xA0Stack<T\", \">\", \",ConcurrentStack<T\", \">\", \", ImmutableStack<T\", \">\", \",offer LIFO access.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The\\xA0LinkedList<T\", \">\", \"\\xA0generic class allows sequential access either from the head to the tail, or from the tail to the head.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Access each element by index?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ArrayList,\\xA0StringCollection,\\xA0List<T\", \">\", \", ImmutableArray<T\", \">\", \",\\xA0and\\xA0ImmutableList<T\", \">\", \" offer access to their elements \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"by the zero-based index\"), \" of the element.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.hashtable\"\n  }, \"Hashtable\"), \",\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.sortedlist\"\n  }, \"SortedList\"), \",\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.listdictionary\"\n  }, \"ListDictionary\"), \", and\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.stringdictionary\"\n  }, \"StringDictionary\"), \", \\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\n  }, \"Dictionary<TKey,TValue\", \">\"), \",\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sorteddictionary-2\"\n  }, \"SortedDictionary<TKey,TValue\", \">\"), \"\\xA0,\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablehashset-1\"\n  }, \"ImmutableHashSet<T\", \">\"), \",\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutabledictionary-2\"\n  }, \"ImmutableDictionary<TKey,TValue\", \">\"), \",\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesortedset-1\"\n  }, \"ImmutableSortedSet<T\", \">\"), \",\\nand\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutablesorteddictionary-2\"\n  }, \"ImmutableSortedDictionary<TKey,TValue\", \">\"), \".\\noffer access to their elements \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"by key\"), \" .\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.nameobjectcollectionbase\"\n  }, \"NameObjectCollectionBase\"), \"\\xA0and\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.namevaluecollection\"\n  }, \"NameValueCollection\"), \"\\xA0classes, and the\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.keyedcollection-2\"\n  }, \"KeyedCollection<TKey,TItem\", \">\"), \"\\xA0and\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2\"\n  }, \"SortedList<TKey,TValue\", \">\"), \"\\xA0generic classes\\noffer access to their elements \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"by either the zero-based index or the key of the element\"), \".\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will each element contain one value, a combination of one key and one value, or a combination of one key and multiple values?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One value: Use any of the collections based on the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.ilist\"\n  }, \"IList\"), \"\\xA0,\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1\"\n  }, \"IList<T\", \">\"), \"\\xA0or\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.iimmutablelist-1\"\n  }, \"IImmutableList<T\", \">\"), \"\\xA0interface.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One key and one value: Use any of the collections based on the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.idictionary\"\n  }, \"IDictionary\"), \"\\xA0,\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2\"\n  }, \"IDictionary<TKey,TValue\", \">\"), \",\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.iimmutableset-1\"\n  }, \"IImmutableSet<T\", \">\"), \"\\xA0or\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.iimmutabledictionary-2\"\n  }, \"IImmutableDictionary<TKey,TValue\", \">\"), \"\\xA0interfaces.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One value with embedded key: Use the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.keyedcollection-2\"\n  }, \"KeyedCollection<TKey,TItem\", \">\"), \"\\xA0\\ngeneric class.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One key and multiple values: Use the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.namevaluecollection\"\n  }, \"NameValueCollection\"), \"\\xA0class.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sort the elements differently from how they were entered?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.hashtable\"\n  }, \"Hashtable\"), \"\\xA0class sorts its elements by their hash\\ncodes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.sortedlist\"\n  }, \"SortedList\"), \"\\xA0class, and the\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2\"\n  }, \"SortedList<TKey,TValue\", \">\"), \"\\xA0and\\xA0\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sorteddictionary-2\"\n  }, \"SortedDictionary<TKey,TValue\", \">\"), \"\\xA0generic\\nclasses sort their elements by the key. The sort order is based on the implementation of the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.icomparer\"\n  }, \"IComparer\"), \"\\xA0\\ninterface for the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.sortedlist\"\n  }, \"SortedList\"), \"\\xA0class and on the implementation of the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icomparer-1\"\n  }, \"IComparer<T\", \">\"), \"\\xA0\\ngeneric interface for the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2\"\n  }, \"SortedList<TKey,TValue\", \">\"), \"\\xA0and\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sorteddictionary-2\"\n  }, \"SortedDictionary<TKey,TValue\", \">\"), \"\\xA0\\ngeneric classes. Of the two generic types,\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sorteddictionary-2\"\n  }, \"SortedDictionary<TKey,TValue\", \">\"), \"\\xA0offers better performance than\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2\"\n  }, \"SortedList<TKey,TValue\", \">\"), \",\\nwhile\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2\"\n  }, \"SortedList<TKey,TValue\", \">\"), \"\\xA0consumes less memory.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.arraylist\"\n  }, \"ArrayList\"), \"\\xA0provides a\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.arraylist.sort\"\n  }, \"Sort\"), \"\\xA0method that takes an\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.icomparer\"\n  }, \"IComparer\"), \"\\xA0implementation as a parameter. Its generic counterpart, the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1\"\n  }, \"List<T\", \">\"), \"\\xA0generic class, provides a\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.sort\"\n  }, \"Sort\"), \"\\xA0method that takes an implementation of the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icomparer-1\"\n  }, \"IComparer<T\", \">\"), \"\\xA0generic interface as a parameter.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do you need fast searches and retrieval of information?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.listdictionary\"\n  }, \"ListDictionary\"), \"\\xA0is faster than\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.hashtable\"\n  }, \"Hashtable\"), \"\\xA0for small collections (10 items or fewer). The\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2\"\n  }, \"Dictionary<TKey,TValue\", \">\"), \"\\xA0generic class provides faster lookup than the\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sorteddictionary-2\"\n  }, \"SortedDictionary<TKey,TValue\", \">\"), \"\\xA0generic class. The multi-threaded implementation is\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2\"\n  }, \"ConcurrentDictionary<TKey,TValue\", \">\"), \".\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentbag-1\"\n  }, \"ConcurrentBag<T\", \">\"), \"\\xA0provides fast multi-threaded insertion for unordered data. For more information about both multi-threaded types, see\\xA0\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/standard/collections/thread-safe/when-to-use-a-thread-safe-collection\"\n  }, \"When to Use a Thread-Safe Collection\"), \".\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do you need collections that accept only strings?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"StringCollection,\\xA0StringDictionary\\xA0(\\xA0(System.Collections.Specialized\\xA0).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List<String\", \">\", \"\\xA0or\\xA0Dictionary<String, String\", \">\", \"(System.Collections.Generic)\")))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog/collection-csharp-basic/1\"\n  }, \"Collections in C# (The basics 1)\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog/collection-csharp-basic/2\"\n  }, \"Collections in C# (The basics 2)\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog/collection-csharp-basic/3\"\n  }, \"Collections in C# (The basics 3)\")), mdx(\"h1\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/zh-cn/previous-versions/dotnet/netframework-3.0/6tc79sx1(v=vs.85)\"\n  }, \"Selecting a Collection class from Microsoft\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"3. System.Collection The System.Collection.Generic namespace came out during .Net 2.0, so the System.Collection is a bit obselete (cause it…","timeToRead":3,"banner":null}},"pageContext":{"slug":"/blog/collection-csharp-basic/2","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}