{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/blog/collection-csharp-basic/3",
    "result": {"data":{"post":{"slug":"/blog/collection-csharp-basic/3","title":"Collections in C# (The basics 3)","date":"20.08.2021","tags":[{"name":"C# basics","slug":"c-basics"}],"description":"A discussion for C# System.Collections and System.Collection.generic","canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Collections in C# (The basics 3)\",\n  \"date\": \"2021-08-20T00:00:00.000Z\",\n  \"description\": \"A discussion for C# System.Collections and System.Collection.generic\",\n  \"slug\": \"/blog/collection-csharp-basic/3\",\n  \"tags\": [\"C# basics\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"5. Commonly used interfaces and method implementation\"), mdx(\"left\", null, \"\\n    \", mdx(\"img\", {\n    parentName: \"left\",\n    \"style\": {\n      \"borderRadius\": \"0.1125em\",\n      \"boxShadow\": \"0 2px 1px 0 rgba(34,36,38,.12),0 2px 5px 0 rgba(34,36,38,.08)\"\n    },\n    \"src\": \"https://cdn.jsdelivr.net/gh/Big-Bro222/StaticFileServer/big-bro222.github.io/posts/Collections-in-CSharp(The-basics-3)/interface.png\",\n    \"width\": \"100%\",\n    \"alt\": \"interface.png\"\n  }), \"\\n    \", mdx(\"br\", {\n    parentName: \"left\"\n  }), \"\\n    \", mdx(\"div\", {\n    parentName: \"left\",\n    \"style\": {\n      \"color\": \"#999\",\n      \"borderBottom\": \"1px solid #d9d9d9\",\n      \"display\": \"inline-block\"\n    }\n  }, \"\\n    Figure 1 Hierarchy of interfaces in collection\\n  \\t\")), mdx(\"p\", null, \"The main interfaces of Collection\"), mdx(\"h3\", null, \"IEnumerable<T\", \">\"), mdx(\"p\", null, \"Exposes the enumerator, which supports a simple iteration over a collection of a specified type.\"), mdx(\"p\", null, \"Collections that implement\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=net-6.0\"\n  }, \"IEnumerable<T\", \">\"), \" can be enumerated by using the\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foreach\"), \"statement.\"), mdx(\"p\", null, \"The foreach statement is a syntax sugar, it\\u2019s actually the MoveNext(), Current() and Reset() in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerator-1?view=net-6.0\"\n  }, \"IEnumerator<T\", \">\"), \" do the job.\"), mdx(\"h3\", null, mdx(\"strong\", {\n    parentName: \"h3\"\n  }, \"ICollection<T\", \">\")), mdx(\"p\", null, \"The\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1?view=net-6.0\"\n  }, \"ICollection<T\", \">\"), \"\\xA0interface extends\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=net-6.0\"\n  }, \"IEnumerable<T\", \">\"), \";\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2?view=net-6.0\"\n  }, \"IDictionary<TKey,TValue\", \">\"), \"\\n\\xA0and\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1?view=net-6.0\"\n  }, \"IList<T\", \">\"), \"are more specialized interfaces that extend\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1?view=net-6.0\"\n  }, \"ICollection<T\", \">\"), \". A\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2?view=net-6.0\"\n  }, \"IDictionary<TKey,TValue\", \">\"), \"\\xA0implementation is a collection of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"key/value pairs\"), \", like the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=net-6.0\"\n  }, \"Dictionary<TKey,TValue\", \">\"), \"class. A\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1?view=net-6.0\"\n  }, \"IList<T\", \">\"), \"implementation is a collection of values, and its members can be accessed by index, like the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-6.0\"\n  }, \"List<T\", \">\"), \"class.\"), mdx(\"p\", null, \"Methods: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Add, Clear,Contains, Copy to, Remove\"), \" ( \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bold\"), \" represents new methods apart from the parent interface )\"), mdx(\"p\", null, \"Uses IEquatable<T\", \">\", \" to determine whether a\\xA0instance is in the collection, or you can write your own EqualityComparer<T\", \">\", \" to determine for a specific collection. An example will be discussed later.\"), mdx(\"h3\", null, mdx(\"strong\", {\n    parentName: \"h3\"\n  }, \"IList<T\", \">\")), mdx(\"p\", null, \"The\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1?view=net-6.0\"\n  }, \"IList<T\", \">\"), \" generic interface is a descendant of the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1?view=net-6.0\"\n  }, \"ICollection<T\", \">\"), \" generic interface and is the base interface of all generic lists.\"), mdx(\"p\", null, \"Methods: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IndexOf, Insert, RemoveAt\"), \" ( \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bold\"), \" represents new methods apart from the parent interface )\"), mdx(\"p\", null, \"While deleting a element from the IList<T\", \">\", \", one should use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \" with a descending order instead of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foreach.\"), \" Because RemoveAt() method will change the index of other elements.\"), mdx(\"h3\", null, mdx(\"strong\", {\n    parentName: \"h3\"\n  }, \"IDictionary<TKey,TValue\", \">\")), mdx(\"p\", null, \"The\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2?view=net-6.0\"\n  }, \"IDictionary<TKey,TValue\", \">\"), \"\\xA0interface is the base interface for generic collections of key/value pairs. Each element is a key/value pair stored in a\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.keyvaluepair-2?view=net-6.0\"\n  }, \"KeyValuePair<TKey,TValue\", \">\"), \"\\xA0object.\"), mdx(\"p\", null, \"Methods: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ContainsKey, TryGetValue\"), \" ( \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bold\"), \" represents new methods apart from the parent interface )\"), mdx(\"h3\", null, mdx(\"strong\", {\n    parentName: \"h3\"\n  }, \"ISet<T\", \">\")), mdx(\"p\", null, \"This interface provides methods for implementing sets, which are collections that have unique elements and specific operations. The\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-6.0\"\n  }, \"HashSet<T\", \">\"), \" and\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedset-1?view=net-6.0\"\n  }, \"SortedSet<T\", \">\"), \" collections implement this interface.\"), mdx(\"p\", null, \"Implementations can vary in how they determine equality of objects; for example, the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-6.0\"\n  }, \"List<T\", \">\"), \"\\xA0class uses\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.comparer-1.default?view=net-6.0\"\n  }, \"Comparer<T\", \">\", \".Default\"), \", whereas the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=net-6.0\"\n  }, \"Dictionary<TKey,TValue\", \">\"), \"\\xA0class allows the user to specify the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icomparer-1?view=net-6.0\"\n  }, \"IComparer<T\", \">\"), \"\\xA0implementation to use for comparing keys.\"), mdx(\"h3\", null, \"IComparer<T\", \">\", \" and IEqulityComparer<T\", \">\"), mdx(\"p\", null, \"This interface is used with the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.sort?view=net-6.0\"\n  }, \"List<T\", \">\", \".Sort\"), \"\\xA0and\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.binarysearch?view=net-6.0\"\n  }, \"List<T\", \">\", \".BinarySearch\"), \"\\xA0methods. It provides a way to customize the sort order of a collection. Classes that implement this interface include the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sorteddictionary-2?view=net-6.0\"\n  }, \"SortedDictionary<TKey,TValue\", \">\"), \"\\xA0and\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2?view=net-6.0\"\n  }, \"SortedList<TKey,TValue\", \">\"), \"\\xA0generic classes.\"), mdx(\"p\", null, \"The default implementation of this interface is the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.comparer-1?view=net-6.0\"\n  }, \"Comparer<T\", \">\"), \"\\xA0class. The\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.stringcomparer?view=net-6.0\"\n  }, \"StringComparer\"), \"\\xA0class implements this interface for type\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.string?view=net-6.0\"\n  }, \"String\"), \".\"), mdx(\"p\", null, \"This interface supports ordering comparisons. That is, when the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.comparer-1.compare?view=net-6.0\"\n  }, \"Compare\"), \"\\xA0method returns 0, it means that two objects sort the same. Implementation of exact equality comparisons is provided by the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.iequalitycomparer-1?view=net-6.0\"\n  }, \"IEqualityComparer<T\", \">\"), \"\\xA0generic interface.\"), mdx(\"p\", null, \"We recommend that you derive from the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.comparer-1?view=net-6.0\"\n  }, \"Comparer<T\", \">\"), \"\\xA0class instead of implementing the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icomparer-1?view=net-6.0\"\n  }, \"IComparer<T\", \">\"), \"\\xA0interface, because the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.comparer-1?view=net-6.0\"\n  }, \"Comparer<T\", \">\"), \"\\xA0class provides an explicit interface implementation of the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.comparer-1.system-collections-icomparer-compare?view=net-6.0\"\n  }, \"IComparer.Compare\"), \"\\xA0method and the\\xA0\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.comparer-1.default?view=net-6.0\"\n  }, \"Default\"), \"\\xA0property that gets the default comparer for the object.\"), mdx(\"p\", null, \"Comparer is very useful in generic collections, because it\\u2019s the core of finding by key, sorting and add value by key.\"), mdx(\"p\", null, \"With these two interface, we can customize the why of sorting data or query data by key.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"You can assign a comparer implementing the interface( Icomparer or Iequalitycomparer )in constructors\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"//one way of using comparer(Icomparer)\\n    static Dictionary<Box, String> boxes;\\n\\n    static void Main()\\n    {\\n//Boxes equality by Dimension\\n        BoxSameDimensions boxDim = new BoxSameDimensions();\\n        boxes = new Dictionary<Box, string>(boxDim);\\n        Box redBox = new Box(8, 4, 8);\\n        Box greenBox = new Box(8, 6, 8);\\n        Box blueBox = new Box(8, 4, 8);\\n        Box yellowBox = new Box(8, 8, 8);\\n        AddBox(redBox, \\\"red\\\");\\n        AddBox(greenBox, \\\"green\\\");\\n        AddBox(blueBox, \\\"blue\\\");\\n        AddBox(yellowBox, \\\"yellow\\\");\\n\\n//Boxes equality by volume\\n        BoxSameVolume boxVolume = new BoxSameVolume();\\n        boxes = new Dictionary<Box, string>(boxVolume);\\n        Box pinkBox = new Box(8, 4, 8);\\n        Box orangeBox = new Box(8, 6, 8);\\n        Box purpleBox = new Box(4, 8, 8);\\n        Box brownBox = new Box(8, 8, 4);\\n        AddBox(pinkBox, \\\"pink\\\");\\n        AddBox(orangeBox, \\\"orange\\\");\\n        AddBox(purpleBox, \\\"purple\\\");\\n        AddBox(brownBox, \\\"brown\\\");\\n    }\\n\\npublic class Box\\n{\\n    public Box(int h, int l, int w)\\n    {\\n        this.Height = h;\\n        this.Length = l;\\n        this.Width = w;\\n    }\\n    public int Height { get; set; }\\n    public int Length { get; set; }\\n    public int Width { get; set; }\\n}\\n\\nclass BoxSameDimensions : EqualityComparer<Box>\\n{\\n    public override bool Equals(Box b1, Box b2)\\n    {\\n        if (b1 == null && b2 == null)\\n            return true;\\n        else if (b1 == null || b2 == null)\\n            return false;\\n\\n        return (b1.Height == b2.Height &&\\n                b1.Length == b2.Length &&\\n                b1.Width == b2.Width);\\n    }\\n\\n    public override int GetHashCode(Box bx)\\n    {\\n        int hCode = bx.Height ^ bx.Length ^ bx.Width;\\n        return hCode.GetHashCode();\\n    }\\n}\\n\\nclass BoxSameVolume : EqualityComparer<Box>\\n{\\n    public override bool Equals(Box b1, Box b2)\\n    {\\n        if (b1 == null && b2 == null)\\n            return true;\\n        else if (b1 == null || b2 == null)\\n            return false;\\n\\n        return (b1.Height * b1.Width * b1.Length ==\\n                b2.Height * b2.Width * b2.Length);\\n    }\\n\\n    public override int GetHashCode(Box bx)\\n    {\\n        int hCode = bx.Height * bx.Length * bx.Width;\\n        return hCode.GetHashCode();\\n    }\\n}\\n\")), mdx(\"p\", null, \"The item class can also derive from comparer (Equalitycomparer)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, \"\\nBoxes.Sort(new BoxLengthFirst());\\n\\npublic class BoxLengthFirst : Comparer<Box>\\n{\\n    // Compares by Length, Height, and Width.\\n    public override int Compare(Box x, Box y)\\n    {\\n        if (x.Length.CompareTo(y.Length) != 0)\\n        {\\n            return x.Length.CompareTo(y.Length);\\n        }\\n        else if (x.Height.CompareTo(y.Height) != 0)\\n        {\\n            return x.Height.CompareTo(y.Height);\\n        }\\n        else if (x.Width.CompareTo(y.Width) != 0)\\n        {\\n            return x.Width.CompareTo(y.Width);\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}\\n\\n/***********************or***********************/\\n\\nBoxes.Sort();\\npublic class Box: Comparer<Box>\\n{\\n    // Compares by Length, Height, and Width.\\n    public override int Compare(Box x, Box y)\\n    {\\n        if (x.Length.CompareTo(y.Length) != 0)\\n        {\\n            return x.Length.CompareTo(y.Length);\\n        }\\n        else if (x.Height.CompareTo(y.Height) != 0)\\n        {\\n            return x.Height.CompareTo(y.Height);\\n        }\\n        else if (x.Width.CompareTo(y.Width) != 0)\\n        {\\n            return x.Width.CompareTo(y.Width);\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog/collection-csharp-basic/1\"\n  }, \"Collections in C# (The basics 1)\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog/collection-csharp-basic/2\"\n  }, \"Collections in C# (The basics 2)\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/blog/collection-csharp-basic/3\"\n  }, \"Collections in C# (The basics 3)\")), mdx(\"h1\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://zhuanlan.zhihu.com/p/104279428\"\n  }, \"\\u4ECE\\u96F6\\u5F00\\u59CB\\u5206\\u6790C#\\u6240\\u6709\\u5E38\\u7528\\u96C6\\u5408\\u7C7B\\u7684\\u8BBE\\u8BA1\\uFF08\\u6E90\\u7801\\u5411\\uFF09\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"5. Commonly used interfaces and method implementation The main interfaces of Collection IEnumerable<T > Exposes the enumerator, which…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/blog/collection-csharp-basic/3","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}